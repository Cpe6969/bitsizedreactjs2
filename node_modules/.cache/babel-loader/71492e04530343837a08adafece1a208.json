{"ast":null,"code":"import axios from 'axios';\nimport { PLAYLIST_CREATE_REQUEST, PLAYLIST_CREATE_SUCCESS, PLAYLIST_CREATE_FAIL, PLAYLIST_LIST_REQUEST, PLAYLIST_LIST_SUCCESS, PLAYLIST_LIST_FAIL, PLAYLIST_DELETE_REQUEST, PLAYLIST_DELETE_SUCCESS, PLAYLIST_DELETE_FAIL } from '../constants/playlistConstants';\nexport const createPlaylist = playlist => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PLAYLIST_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const formData = new FormData();\n    formData.append('title', playlist.title);\n    formData.append('image', playlist.image);\n    formData.append('link', playlist.link);\n    const {\n      data\n    } = await axios.post(`/api/playlists/create/`, formData, config);\n    dispatch({\n      type: PLAYLIST_CREATE_SUCCESS,\n      payload: data\n    });\n\n    // Retrieve the list of playlists and update the state\n    dispatch(listPlaylists());\n  } catch (error) {\n    dispatch({\n      type: PLAYLIST_CREATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const listPlaylists = () => async dispatch => {\n  try {\n    dispatch({\n      type: PLAYLIST_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/playlists/list/');\n\n    // For each playlist, fetch the songs and add them to the playlist object\n    const playlists = await Promise.all(data.map(async playlist => {\n      const {\n        data: songs\n      } = await axios.get(`/api/playlists/${playlist.id}/songs/`);\n      return {\n        ...playlist,\n        songs\n      };\n    }));\n    dispatch({\n      type: PLAYLIST_LIST_SUCCESS,\n      payload: playlists\n    });\n  } catch (error) {\n    dispatch({\n      type: PLAYLIST_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deletePlaylist = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PLAYLIST_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/playlists/${id}/`, config);\n    dispatch({\n      type: PLAYLIST_DELETE_SUCCESS,\n      payload: id\n    });\n\n    // Retrieve the list of playlists and update the state\n    dispatch(listPlaylists());\n  } catch (error) {\n    dispatch({\n      type: PLAYLIST_DELETE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","PLAYLIST_CREATE_REQUEST","PLAYLIST_CREATE_SUCCESS","PLAYLIST_CREATE_FAIL","PLAYLIST_LIST_REQUEST","PLAYLIST_LIST_SUCCESS","PLAYLIST_LIST_FAIL","PLAYLIST_DELETE_REQUEST","PLAYLIST_DELETE_SUCCESS","PLAYLIST_DELETE_FAIL","createPlaylist","playlist","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","formData","FormData","append","title","image","link","data","post","payload","listPlaylists","error","response","detail","message","get","playlists","Promise","all","map","songs","id","deletePlaylist","delete"],"sources":["C:/Users/franc/Downloads/POPSICCLE-SITE/frontend/src/actions/playlistActions.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  PLAYLIST_CREATE_REQUEST,\r\n  PLAYLIST_CREATE_SUCCESS,\r\n  PLAYLIST_CREATE_FAIL,\r\n  PLAYLIST_LIST_REQUEST,\r\n  PLAYLIST_LIST_SUCCESS,\r\n  PLAYLIST_LIST_FAIL,\r\n  PLAYLIST_DELETE_REQUEST,\r\n  PLAYLIST_DELETE_SUCCESS,\r\n  PLAYLIST_DELETE_FAIL,\r\n} from '../constants/playlistConstants';\r\n\r\nexport const createPlaylist = (playlist) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PLAYLIST_CREATE_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const formData = new FormData();\r\n    formData.append('title', playlist.title);\r\n    formData.append('image', playlist.image);\r\n    formData.append('link', playlist.link);\r\n\r\n\r\n    const { data } = await axios.post(`/api/playlists/create/`, formData, config);\r\n\r\n    dispatch({ type: PLAYLIST_CREATE_SUCCESS, payload: data });\r\n\r\n    // Retrieve the list of playlists and update the state\r\n    dispatch(listPlaylists());\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PLAYLIST_CREATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listPlaylists = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: PLAYLIST_LIST_REQUEST });\r\n\r\n    const { data } = await axios.get('/api/playlists/list/');\r\n\r\n    // For each playlist, fetch the songs and add them to the playlist object\r\n    const playlists = await Promise.all(\r\n      data.map(async (playlist) => {\r\n        const { data: songs } = await axios.get(`/api/playlists/${playlist.id}/songs/`);\r\n        return { ...playlist, songs };\r\n      })\r\n    );\r\n\r\n    dispatch({\r\n      type: PLAYLIST_LIST_SUCCESS,\r\n      payload: playlists,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PLAYLIST_LIST_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deletePlaylist = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PLAYLIST_DELETE_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    await axios.delete(`/api/playlists/${id}/`, config);\r\n\r\n    dispatch({ type: PLAYLIST_DELETE_SUCCESS, payload: id });\r\n\r\n    // Retrieve the list of playlists and update the state\r\n    dispatch(listPlaylists());\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PLAYLIST_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}