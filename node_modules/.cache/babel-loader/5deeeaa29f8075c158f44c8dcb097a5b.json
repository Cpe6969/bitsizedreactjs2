{"ast":null,"code":"import axios from 'axios';\nimport { PLAYLIST_CREATE_REQUEST, PLAYLIST_CREATE_SUCCESS, PLAYLIST_CREATE_FAIL } from '../constants/playlistConstants';\n\n// export const createPlaylist = (playlist) => async (dispatch, getState) => {\n//   try {\n//     dispatch({ type: PLAYLIST_CREATE_REQUEST });\n\n//     const {\n//       userLogin: { userInfo },\n//     } = getState();\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'multipart/form-data',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     };\n\n//     const formData = new FormData();\n//     formData.append('title', playlist.title);\n//     formData.append('image', playlist.image);\n\n//     const { data } = await axios.post(`/api/playlists/create/`, formData, config);\n\n//     dispatch({ type: PLAYLIST_CREATE_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({\n//       type: PLAYLIST_CREATE_FAIL,\n//       payload:\n//         error.response && error.response.data.detail\n//           ? error.response.data.detail\n//           : error.message,\n//     });\n//   }\n// };\n\nexport const createPlaylist = playlist => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PLAYLIST_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const formData = new FormData();\n    formData.append('title', playlist.title);\n    formData.append('image', playlist.image);\n    const {\n      data\n    } = await axios.post(`/api/playlists/create/`, {}, config);\n    dispatch({\n      type: PLAYLIST_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PLAYLIST_CREATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","PLAYLIST_CREATE_REQUEST","PLAYLIST_CREATE_SUCCESS","PLAYLIST_CREATE_FAIL","createPlaylist","playlist","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","formData","FormData","append","title","image","data","post","payload","error","response","detail","message"],"sources":["C:/Users/franc/Downloads/POPSICCLE-SITE/frontend/src/actions/playlistActions.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  PLAYLIST_CREATE_REQUEST,\r\n  PLAYLIST_CREATE_SUCCESS,\r\n  PLAYLIST_CREATE_FAIL,\r\n} from '../constants/playlistConstants';\r\n\r\n// export const createPlaylist = (playlist) => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({ type: PLAYLIST_CREATE_REQUEST });\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState();\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'multipart/form-data',\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     };\r\n    \r\n\r\n//     const formData = new FormData();\r\n//     formData.append('title', playlist.title);\r\n//     formData.append('image', playlist.image);\r\n\r\n//     const { data } = await axios.post(`/api/playlists/create/`, formData, config);\r\n\r\n//     dispatch({ type: PLAYLIST_CREATE_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: PLAYLIST_CREATE_FAIL,\r\n//       payload:\r\n//         error.response && error.response.data.detail\r\n//           ? error.response.data.detail\r\n//           : error.message,\r\n//     });\r\n//   }\r\n// };\r\n\r\n\r\nexport const createPlaylist = (playlist) => async (dispatch, getState) => {\r\n  try {\r\n      dispatch({\r\n          type: PLAYLIST_CREATE_REQUEST\r\n      })\r\n\r\n      const {\r\n          userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n          headers: {\r\n              'Content-type': 'application/json',\r\n              Authorization: `Bearer ${userInfo.token}`\r\n          }\r\n      }\r\n      const formData = new FormData();\r\n    formData.append('title', playlist.title);\r\n    formData.append('image', playlist.image);\r\n      const { data } = await axios.post(\r\n          `/api/playlists/create/`,\r\n          {},\r\n          config\r\n      )\r\n      dispatch({\r\n          type: PLAYLIST_CREATE_SUCCESS,\r\n          payload: data,\r\n      })\r\n\r\n\r\n  } catch (error) {\r\n      dispatch({\r\n          type: PLAYLIST_CREATE_FAIL,\r\n          payload: error.response && error.response.data.detail\r\n              ? error.response.data.detail\r\n              : error.message,\r\n      })\r\n  }\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,uBAAuB,EACvBC,uBAAuB,EACvBC,oBAAoB,QACf,gCAAgC;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,cAAc,GAAIC,QAAQ,IAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxE,IAAI;IACAD,QAAQ,CAAC;MACLE,IAAI,EAAEP;IACV,CAAC,CAAC;IAEF,MAAM;MACFQ,SAAS,EAAE;QAAEC;MAAS;IAC1B,CAAC,GAAGH,QAAQ,EAAE;IAEd,MAAMI,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;MAC5C;IACJ,CAAC;IACD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IACjCD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEZ,QAAQ,CAACa,KAAK,CAAC;IACxCH,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEZ,QAAQ,CAACc,KAAK,CAAC;IACtC,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAC5B,wBAAuB,EACxB,CAAC,CAAC,EACFV,MAAM,CACT;IACDL,QAAQ,CAAC;MACLE,IAAI,EAAEN,uBAAuB;MAC7BoB,OAAO,EAAEF;IACb,CAAC,CAAC;EAGN,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZjB,QAAQ,CAAC;MACLE,IAAI,EAAEL,oBAAoB;MAC1BmB,OAAO,EAAEC,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,MAAM,GAC/CF,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACK,MAAM,GAC1BF,KAAK,CAACG;IAChB,CAAC,CAAC;EACN;AACF,CAAC"},"metadata":{},"sourceType":"module"}